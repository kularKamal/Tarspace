{"language":"javascript","_id":"_design/TEMPLATE","views":{"artifacts":{"map":"function (doc) {\n  if (doc.type === \"artifact\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.name, doc.version], { _id: doc._id })\n  }\n}"},"configurations":{"map":"function (doc) {\n  if (doc.type === \"configuration\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.deliverable, doc.stage], { _id: doc._id })\n  }\n}"},"configurations-latest":{"map":"function (doc) {\n  if (doc.type === \"configuration\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.deliverable, doc.stage], { _id: doc._id, timestamp: doc.timestamp })\n  }\n}","reduce":"function (keys, values, rereduce) {\n  let latest = {}\n  let latest_date = new Date(0)\n\n  for (let i = 0; i < values.length; i++) {\n    const dt = new Date(values[i].timestamp)\n    if (dt >= latest_date) {\n      latest_date = dt\n      latest = values[i]\n    }\n  }\n  return latest\n}"},"deliverables":{"map":"function (doc) {\n  if (doc.type === \"deliverable\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.name, doc.version], { _id: doc._id })\n  }\n}","reduce":"_count"},"deliverables-search":{"map":"function (doc) {\n  if (doc.type === \"deliverable\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.name], {\n      slug: `${project}/${customer}/${doc.name}`,\n      name: doc.name,\n      artifacts: doc.artifacts,\n      repository: doc.repository,\n      project: doc.project,\n    })\n  }\n}","reduce":"function (keys, values, rereduce) {\n  const out = {}\n  values.forEach(v => {\n    Object.assign(out, v)\n  })\n  return out\n}"},"events":{"map":"function (doc) {\n  if (doc.type === \"event\") {\n    const [project, customer] = doc.project.split(\"@\")\n\n    emit([customer, project, doc.target, ...doc.version.split(\".\")], doc)\n  }\n}","reduce":"_count"},"events-build":{"map":"function (doc) {\n  if (doc.type === \"event\" && doc.stage === null) {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.target, doc.timestamp], 1)\n  }\n}","reduce":"_count"},"events-publish":{"map":"function (doc) {\n  if (doc.type === \"event\" && doc.stage && doc.event !== \"start\") {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.target, doc.stage, doc.timestamp], doc.event.toUpperCase())\n  }\n}","reduce":"_count"},"grouped-events":{"map":"function (doc) {\n  if (doc.type === \"event\" && doc._id) {\n    const [project, customer] = doc.project.split(\"@\")\n    const partialId = doc._id.substring(0, doc._id.lastIndexOf(\"/\"))\n    emit([customer, project, doc.target, partialId], doc)\n  }\n}","reduce":"function (keys, values, rereduce) {\n  if (!rereduce) {\n    const out = {}\n\n    values.forEach(v => {\n      if (!v._id) {\n        return out\n      }\n\n      out[v.event] = {\n        id: v._id,\n        timestamp: v.timestamp,\n      }\n      out.type = v.stage ? \"publish\" : \"build\"\n      out.stage = v.stage\n      out.version = v.version\n      out.repository = v.repository\n    })\n    return out\n  }\n\n  const out = {}\n  values.forEach(v => {\n    Object.assign(out, v)\n  })\n  return out\n}"},"latest-published-version":{"map":"function (doc) {\n  if (doc.type === \"event\" && doc.event === \"success\" && doc.stage) {\n    const [project, customer] = doc.project.split(\"@\")\n    emit([customer, project, doc.target, doc.stage], doc.version)\n  }\n}","reduce":"function (keys, values, rereduce) {\n  // From https://gist.github.com/iwill/a83038623ba4fef6abb9efca87ae9ccb\\nfunction\n  function semverCompare(a, b) {\n    if (a.startsWith(b + \"-\")) {\n      return -1\n    }\n    if (b.startsWith(a + \"-\")) {\n      return 1\n    }\n    return a.localeCompare(b, undefined, { numeric: true, sensitivity: \"case\", caseFirst: \"upper\" })\n  }\n\n  let latest = \"0.0.0\"\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] !== \"string\") {\n      continue\n    }\n\n    const current = values[i]\n    if (semverCompare(current, latest) > 0) {\n      latest = current\n    }\n  }\n\n  return latest\n}"}}}